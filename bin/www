'use strict';

module.exports = initializer;

var EventEmitter = require('events').EventEmitter;
var debug        = require('debug')('app:www');
var _            = require('lodash');

var service = require('../index.js');

/**
 *
 * @param {AppManager} appManager
 * @param {Config} config
 *
 * @return {undefined}
 */
function initializer(appManager, config) {
    initializer.emitter.emit('set-up', appManager, config);

    //this implementation expects apps array growth in the loop 
    for (var i = 0, app = null; i < appManager.apps.length; i++) {
        app = appManager.apps[i];

        app.once('post-init', initializer.onPostInit);

        initializer.emitter.emit('app', app);
    }
}

//Compatibility reasons
initializer.emitter     = new EventEmitter;
initializer.on          = initializer.emitter.on.bind(initializer.emitter);
initializer.emit        = initializer.emitter.emit.bind(initializer.emitter);
initializer.onPostInit  = onPostInit;
initializer.onListening = onListening;
initializer.onError     = onError;

initializer.on('integrity-failure', function(err, app) {
    console.error(err);
    process.exit(1);
});

function onPostInit(app) {
    app.on('error', initializer.onError);
    app.on('listening', initializer.onListening);
    app.build();
    service.serviceIntegrity.inspect(app).then(function() {
        app.listen(app.config.get('listen'));
        initializer.emitter.emit('integrity-pass', app);
    }).catch(function(err) {
        initializer.emitter.emit('integrity-failure', err, app)
    });
}

function onListening(app) {
    console.log(`${app.options.name} app listening on port: ${app.server.address().port}`);
}

function onError(err) {
    debug(err.stack);
}
