'use strict';
var debug   = require('debug')('app:www');
var _       = require('lodash');
var docs    = require('bi-docs');

var service = require('../index.js');

module.exports = initializer;

/**
 *
 * @param {AppManager} appManager
 * @param {Config} config
 *
 * @return {CLI}
 */
function initializer(appManager, config) {
    var cli = service.CLI.init(appManager, config.get('cli'));

    //this implementation expects apps array growth in the loop 
    for (var i = 0, app = null; i < appManager.apps.length; i++) {
        app = appManager.apps[i];

        app.once('post-init', initializer.onPostInit);

        //run doc server
        if (app.config.get('doc') && app.config.get('doc:listen')) {

            var docCfg = config.createLiteralProvider(app.config.get('doc'));
            docs.server.build(app, docCfg);
        }
    }

    //TODO implement same interface for CLI server as for other apps so that
    //cli can be one of the apps in appManager
    return cli;
}

initializer.onPostInit = onPostInit;
initializer.onListening = onListening;
initializer.onError = onError;
initializer.onInspectionFailure = onInspectionFailure;

function onPostInit(app) {
    app.on('error', initializer.onError);
    app.on('listening', initializer.onListening);
    app.build();
    service.serviceIntegrity.inspect(app).then(function() {
        app.listen(app.config.get('listen'));
    }).catch(initializer.onInspectionFailure);
}

function onListening(app) {
    console.log(`${app.options.name} app listening on port: ${app.server.address().port}`);
}

function onError(err) {
    debug(err.stack);
}

function onInspectionFailure(err) {
    console.error(err);
    process.exit(1);
}
